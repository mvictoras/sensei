#include "lammpsDataAdaptor.h"
#include "MeshMetadata.h"
#include "Error.h"
#include <vtkObjectFactory.h>
#include <vtkSmartPointer.h>
#include <vtkPolyData.h>
#include <vtkPointData.h>
#include <vtkDoubleArray.h>
#include <vtkIntArray.h>
#include <vtkMultiBlockDataSet.h>
#include <vtkCellArray.h>

namespace senseiLammps
{

struct lammpsDataAdaptor::DInternals
{
  vtkMultiBlockDataSet *Mesh;
  vtkPolyData *PolyData;
  vtkPoints *Points;
  vtkDoubleArray *AtomPositions;
  vtkIntArray *AtomTypes;
  vtkIntArray *AtomIDs;
  vtkCellArray *Vertices;
  double xsublo, ysublo, zsublo, xsubhi, ysubhi, zsubhi;
  int nlocal, nghost;
  double **x;
  int *type;
  int *id;
};

//-----------------------------------------------------------------------------
senseiNewMacro(lammpsDataAdaptor);

//-----------------------------------------------------------------------------
lammpsDataAdaptor::lammpsDataAdaptor() :
  Internals(new lammpsDataAdaptor::DInternals())
{
}

//-----------------------------------------------------------------------------
lammpsDataAdaptor::~lammpsDataAdaptor()
{
  delete this->Internals;
}

//-----------------------------------------------------------------------------
void lammpsDataAdaptor::Initialize()
{  
  this->ReleaseData();
}

//-----------------------------------------------------------------------------
void lammpsDataAdaptor::AddLAMMPSData(long ntimestep, int nlocal, int *id, 
                                      int nghost, int *type, double **x, 
                                      double xsublo, double xsubhi, 
                                      double ysublo, double ysubhi, 
                                      double zsublo, double zsubhi)
{
  DInternals& internals = (*this->Internals);

  if (!internals.AtomPositions)
    {
    internals.AtomPositions = vtkDoubleArray::New();
    std::cout << "new AtomPositions" << std::endl;
    }

  if (!internals.AtomTypes)
    {
    internals.AtomTypes = vtkIntArray::New();
    std::cout << "new AtomTypes" << std::endl;
    }

  if (!internals.AtomIDs)
    {
    internals.AtomIDs = vtkIntArray::New();
    std::cout << "new AtomIDs" << std::endl;
    }

  if (!internals.Vertices)
    {
    internals.Vertices = vtkCellArray::New();
    std::cout << "new Vertices" << std::endl;
    }

  // atom coordinates
  if (internals.AtomPositions)
    {
    long nvals = nlocal;

    internals.AtomPositions->SetNumberOfComponents(3);
    internals.AtomPositions->SetArray(*x, nvals*3, 1); 
    internals.AtomPositions->SetName("positions");

    internals.x = x;
    }
  else 
    {
    SENSEI_ERROR("Error. Internal AtomPositions structure not initialized")
    }

  // atom types
  if (internals.AtomTypes)
    {
    long nvals = nlocal;

    internals.AtomTypes->SetNumberOfComponents(1);
    internals.AtomTypes->SetArray(type, nvals, 1);
    internals.AtomTypes->SetName("type");

    internals.type = type;  
    }
  else 
    {
    SENSEI_ERROR("Error. Internal AtomTypes structure not initialized")
    }

  // atom IDs
  if (internals.AtomIDs)
    {
    long nvals = nlocal;

    internals.AtomIDs->SetNumberOfComponents(1);
    internals.AtomIDs->SetArray(id, nvals, 1);
    internals.AtomIDs->SetName("id");

    internals.id = id;  
    }
  else 
    {
    SENSEI_ERROR("Error. Internal AtomIDs structure not initialized")
    }

  // vertices
  if (internals.Vertices)
    {
    vtkIdType pid[1] = {0};

    for( int i=0; i < nlocal; i++) 
      {
      internals.Vertices->InsertNextCell (1, pid);
      pid[0]++;
      }
    }

  // number of atoms
  internals.nlocal = nlocal;
  internals.nghost = nghost;

  // bounding box
  internals.xsublo = xsublo;
  internals.ysublo = ysublo;
  internals.zsublo = zsublo;
  internals.xsubhi = xsubhi;
  internals.ysubhi = ysubhi;
  internals.zsubhi = zsubhi;

  // timestep
  this->SetDataTimeStep(ntimestep);
}

//-----------------------------------------------------------------------------
void lammpsDataAdaptor::GetBounds(double &xsublo, double &xsubhi, 
                                  double &ysublo, double &ysubhi, 
                                  double &zsublo, double &zsubhi)
{
  DInternals& internals = (*this->Internals);

  xsublo = internals.xsublo;
  ysublo = internals.ysublo;
  zsublo = internals.zsublo;
  xsubhi = internals.xsubhi;
  ysubhi = internals.ysubhi;
  zsubhi = internals.zsubhi;
}      

void lammpsDataAdaptor::GetN(int &nlocal, int &nghost )
{
  DInternals& internals = (*this->Internals);
  
  nlocal = internals.nlocal;
  nghost = internals.nghost;
}

void lammpsDataAdaptor::GetPointers(double **&x, int *&type)
{
  DInternals& internals = (*this->Internals);
  
  x = internals.x;
  type = internals.type;
}

//-----------------------------------------------------------------------------
void lammpsDataAdaptor::GetAtoms(vtkDoubleArray *&atoms)
{
  DInternals& internals = (*this->Internals);

  if (internals.AtomPositions)
    atoms = internals.AtomPositions;
  else
    SENSEI_ERROR("Trying to get atom position array before setting it")
}

void lammpsDataAdaptor::GetTypes(vtkIntArray *&types)
{
  DInternals& internals = (*this->Internals);

  if (internals.AtomTypes)
    types = internals.AtomTypes;
  else
    SENSEI_ERROR("Trying to get atom type array before setting it")
}

void lammpsDataAdaptor::GetIDs(vtkIntArray *&ids)
{
  DInternals& internals = (*this->Internals);

  if (internals.AtomIDs)
    ids = internals.AtomIDs;
  else
    SENSEI_ERROR("Trying to get atom ID array before setting it")
}

//-----------------------------------------------------------------------------
int lammpsDataAdaptor::GetNumberOfMeshes(unsigned int &numMeshes)
{
  numMeshes = 1;
  return 0;
}

//-----------------------------------------------------------------------------
int lammpsDataAdaptor::GetMesh(const std::string &meshName, bool structureOnly,
    vtkDataObject *&mesh)
{
  if (meshName != "atoms") 
    {  
    SENSEI_ERROR("No mesh \"" << meshName << "\"")
    return -1;
    }

  DInternals& internals = (*this->Internals);

  if (!internals.Mesh)
    {
    internals.Mesh = vtkMultiBlockDataSet::New();
    std::cout << "new Mesh" << std::endl;
    }


  if (!internals.PolyData)
    {
    internals.PolyData = vtkPolyData::New();
    std::cout << "new polydata" << std::endl;
    }



  if (!structureOnly)
    {
    if (!internals.Points)
      {
      internals.Points = vtkPoints::New();
      std::cout << "new points" << std::endl;
      }


    internals.Points->SetData(internals.AtomPositions);
    internals.PolyData->SetPoints(internals.Points);
    }

  internals.PolyData->SetVerts(internals.Vertices);

  int rank, size; 
  MPI_Comm comm;
  	
  comm = GetCommunicator();
  MPI_Comm_rank(comm, &rank);
  MPI_Comm_size(comm, &size); 

  internals.Mesh->SetNumberOfBlocks(size);
  internals.Mesh->SetBlock(rank, internals.PolyData);
    
  mesh = internals.Mesh;

  return 0;
}

//-----------------------------------------------------------------------------
int lammpsDataAdaptor::AddArray(vtkDataObject* mesh, const std::string &meshName,
    int association, const std::string &arrayName)
{
  (void) mesh;

  if (meshName != "atoms")
    {
    SENSEI_ERROR("No mesh \"" << meshName << "\"")
    return -1;
    }

  if (association != vtkDataObject::FIELD_ASSOCIATION_POINTS)
    {
    SENSEI_ERROR("No cell data on mesh")
    return -1;
    }

  DInternals& internals = (*this->Internals);

  if (arrayName == "type")  	
    internals.PolyData->GetPointData()->AddArray(internals.AtomTypes);    
  else if (arrayName == "id")	
    internals.PolyData->GetPointData()->AddArray(internals.AtomIDs);
    
  return 0;  
}

// not implemented
//----------------------------------------------------------------------------
int lammpsDataAdaptor::AddGhostCellsArray(vtkDataObject *mesh, const std::string &meshName)
{
  (void) mesh;
  (void) meshName;
  return 0;
}

//-----------------------------------------------------------------------------
int lammpsDataAdaptor::GetMeshMetadata(unsigned int id, sensei::MeshMetadataPtr &metadata)
{
  if (id > 0)
    {
    SENSEI_ERROR("invalid mesh id " << id)
    return -1;
    }

  int rank, nRanks;
  MPI_Comm comm;

  comm = GetCommunicator();
  MPI_Comm_rank(comm, &rank);
  MPI_Comm_size(comm, &nRanks);


  metadata->MeshName = "atoms";
  metadata->MeshType = VTK_MULTIBLOCK_DATA_SET;
  metadata->BlockType = VTK_POLY_DATA;
  metadata->CoordinateType = VTK_DOUBLE;
  metadata->NumBlocks = nRanks;
  metadata->NumBlocksLocal = {1};
  //metadata->NumGhostCells = this->Internals->nghost;
  metadata->NumGhostCells = 0;
  metadata->NumArrays = 2;
  metadata->ArrayName = {"type", "id"};
  metadata->ArrayCentering = {vtkDataObject::POINT, vtkDataObject::POINT};
  metadata->ArrayComponents = {1, 1};
  metadata->ArrayType = {VTK_INT, VTK_INT};
  metadata->StaticMesh = 0;

  if (metadata->Flags.BlockExtentsSet())
    {
    SENSEI_WARNING("lammps data adaptor. Flags.BlockExtentsSet()")
    }

  if (metadata->Flags.BlockBoundsSet())
    {
    SENSEI_WARNING("lammps data adaptor. Flags.BlockBoundsSet()")
    }

  if (metadata->Flags.BlockSizeSet())
    {
    SENSEI_WARNING("lammps data adaptor. Flags.BlockSizeSet()")
    }

  if (metadata->Flags.BlockDecompSet())
    {
    metadata->BlockOwner.push_back(rank);
    metadata->BlockIds.push_back(rank);
    }

  if (metadata->Flags.BlockArrayRangeSet())
    {
    SENSEI_WARNING("lammps data adaptor. Flags.BlockArrayRangeSet()")
    }

  return 0;
}



//-----------------------------------------------------------------------------
int lammpsDataAdaptor::ReleaseData()
{
  DInternals& internals = (*this->Internals);

  if(internals.PolyData)
    {
    internals.PolyData->Delete();
    std::cout << "released polydata" << std::endl;
    internals.PolyData = nullptr;
    }

  if(internals.Points)
    {
    internals.Points->Delete();
    std::cout << "released points" << std::endl;
    internals.Points = nullptr;
    }
  
  if(internals.AtomPositions)
    {
    internals.AtomPositions->Delete();
    std::cout << "released atompositions" << std::endl;
    internals.AtomPositions = nullptr;
    }


  if(internals.AtomTypes)
    {  
    internals.AtomTypes->Delete();
    std::cout << "released atomtypes" << std::endl;
    internals.AtomTypes = nullptr;
    }
  
  if(internals.AtomIDs)
    {
    internals.AtomIDs->Delete();
    std::cout << "released polydata" << std::endl;
    internals.AtomIDs = nullptr;
    }

  if(internals.Vertices)
    {
    internals.Vertices->Delete();
    std::cout << "released vertices" << std::endl;
    internals.Vertices = nullptr;
    }

  if(internals.Mesh == nullptr)
    std::cout << "Mesh == nullptr" << std::endl; 

  if(internals.Mesh)
    {
    internals.Mesh->Delete();
    std::cout << "released mesh" << std::endl;
    internals.Mesh = nullptr;
    }



  internals.nlocal = 0;
  internals.nghost = 0;
  internals.xsublo = 0;
  internals.ysublo = 0;
  internals.zsublo = 0;
  internals.xsubhi = 0;
  internals.ysubhi = 0;
  internals.zsubhi = 0;

  return 0;
}

} //senseiLammps


